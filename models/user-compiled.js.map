{"version":3,"sources":["user.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACnC,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC1B,gBAAgB,GAAG,EAAE,CAAC;;AAG1B,IAAI,UAAU,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC;AACjC,YAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE;AACnE,QAAI,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE;AACrB,YAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;AAC1C,SAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE;AAChE,kBAAc,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE;AAC5C,gBAAY,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE;AAC1C,aAAS,EAAE,EAAC,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;AAC3C,cAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAC,CAAC;AAClE,aAAS,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAC,CAAE;AAClE,mBAAe,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE;AAC7C,kBAAc,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE;AAC5C,aAAS,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE;CAC/C,CAAC,CAAC;;AAGH,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,UAAS,IAAI,EAAE;AAClC,QAAI,IAAI,GAAG,IAAI;;;AAAC,AAGhB,QAAI,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,OAAO,IAAI,EAAE,CAAC;;;AAAA,AAGhD,UAAM,CAAC,OAAO,CAAC,gBAAgB,EAAE,UAAS,GAAG,EAAE,IAAI,EAAE;AACjD,YAAI,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;;;AAAA,AAG1B,cAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAS,GAAG,EAAE,IAAI,EAAE;AACjD,gBAAI,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;;;AAAA,AAG1B,gBAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACrB,gBAAI,EAAE,CAAC;SACV,CAAC,CAAC;KACN,CAAC,CAAC;CACN,CAAC,CAAC;;AAEH,UAAU,CAAC,OAAO,CAAC,eAAe,GAAG,UAAS,iBAAiB,EAAE,EAAE,EAAE;AACjE,UAAM,CAAC,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAS,GAAG,EAAE,OAAO,EAAE;AACpE,YAAI,GAAG,EAAE,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;AACxB,UAAE,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;KACrB,CAAC,CAAC;CACN,CAAC;;AAGF,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC","file":"user-compiled.js","sourcesContent":["var mongoose = require('mongoose');\nvar bcrypt = require('bcrypt'),\n    SALT_WORK_FACTOR = 10;\n\n\nvar userSchema = new mongoose.Schema({\n    username: { type: String, index: { unique: true }, required: true },\n    name: {type: String },\n    password: { type: String, required: true },\n    email: { type: String, index: { unique: true }, required: true },\n    profilePicture: {type: String, default: '' },\n    coverPicture: {type: String, default: '' },\n    connected: {type: Boolean, default: false },\n    followedBy: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User'}],\n    following: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User'} ],\n    followedByCount: { type: Number, default: 0 },\n    followingCount: { type: Number, default: 0 },\n    createdAt: { type: Date, default: Date.now }\n});\n\n\nuserSchema.pre('save', function(next) {\n    var user = this;\n\n    // only hash the password if it has been modified (or is new)\n    if (!user.isModified('password')) return next();\n\n    // generate a salt\n    bcrypt.genSalt(SALT_WORK_FACTOR, function(err, salt) {\n        if (err) return next(err);\n\n        // hash the password along with our new salt\n        bcrypt.hash(user.password, salt, function(err, hash) {\n            if (err) return next(err);\n\n            // override the cleartext password with the hashed one\n            user.password = hash;\n            next();\n        });\n    });\n});\n\nuserSchema.methods.comparePassword = function(candidatePassword, cb) {\n    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {\n        if (err) return cb(err);\n        cb(null, isMatch);\n    });\n};\n\n\nmodule.exports = mongoose.model('User', userSchema);"]}